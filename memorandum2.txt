刘杰老师    QQ：36662524
                     手机号码：133  0734  8312
                     办公室：8-407

以后的研究方向改为“软件测试”下的“组合测试”
（自2017.6.21起，半年内发一篇论文）

暑假目标：组合测试技术综述
今后的大方向：组合测试解决合约问题（每个接口的规范问题，接口太多，这是一个NP-难问题）
文献阅读技巧：不必太过细致，了解论文解决了什么问题，用了什么方法即可，需要的时候再去细翻

组合测试研究的三个层次：
数学逻辑推理证明理论
测试用例运行证明理论
满足实际需求，解决当前技术无法解决的问题

命题逻辑是对事物性质的刻画。

合约只是对约束进行了更细致的划分。

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
暑假目标：
基于布尔表达式、合约和约束的测试用例生成的研究综述

工作重点需要了解掌握三个方向：
一是逻辑表达式的在系统中的地位和作用；
二是逻辑表达式在测试中的应用，以及面临的困难是什么？
三是解决这些问题所采用的策略和局限性。
这些内容不一定要深读论文技术细节，可以通过他们的摘要，结论及其它论文的评价获得。

布尔表达式生成组合测试用例的三个问题：
1、布尔表达式怎样生成测试用例？
2、什么时候需要布尔表达式？
3、布尔表达式生成测试用例有哪些要求？
根据这三个要求找资料，写文献综述，找到的资料发给刘老师，让他过目一下，确定有没有必要阅读

文献阅读技巧：
了解论文的主旨――解决了什么问题，用了什么技术方法――即可，不必深入了解技术细节，需要的时候再去细翻。

查文献可以运用百度学术
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.8.8之后的任务：
1、解决两个问题：（1）命题逻辑（逻辑表达式）出自哪里？即命题逻辑（逻辑表达式）的使用场景是什么？
                                     （2）除了合约和故障检测以外，命题逻辑是否还有其他出处？
       其他一些提到的问题：除了命题逻辑，测试用例生成是否还涉及谓词逻辑？后期做时序逻辑的测试用例生成研究。
2、要跳出《基于故障的布尔表达式测试技术综述》这篇文献的内容。
3、一边阅读文献，一边开始动手写综述。半天时间看文献，半天时间写综述。

以后一周做一次汇报（2017.8.15、22、29）
投综述的第一目标是《计算机科学》，最迟到 9 月份要投出综述。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.8.30进行了一次谈话：
“基于约束的测试生成方法：（1）根据约束生成测试用例；（2）根据约束筛选测试用例”
以这个看法作为两条主线，组合看过的文献，将其归纳到这两条主线中；
细化分类不重要，重要的是这两条主线；
对看过的文献，比较各种方法的优劣，进行点评，无法比较的就简单介绍一下；
约束的分类：合约、故障约束。

投文献的事不能拖到10月份，后面还有事。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.8.31进行了一次电话通话：
约束的组织分类
各篇文献利用约束生成测试用例
合约不重要，重要的是约束

注意文献中的方法缺陷，方便确定未来的工作方向
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.3进行了一次电话通话：
根据两条主线，核心是“约束求解”，分为哪些技术流派，它们研究的问题，哪些是“真问题”，哪些是“假问题”
以此进行归纳，从而写好综述中的“未来展望”，还可以借此确认后面的研究方向
可以参考文献中对其他文献内容的介绍和总结，结合自己的看法，添加到综述中

现在开始收，真正动手写综述，争取把第一篇论文写好一些，为后面的工作打下基础。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.6去食堂的路上碰到刘杰老师，简单汇报了一下：
基于“根据约束生成测试用例”这条主线，大致分为两个技术流派：
1）使用算法生成测试用例
       （1）根据逻辑覆盖准则
2）使用约束求解器生成测试用例

基于“根据约束筛选测试用例”这条主线，目前没有头绪
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.11在计算机学院外碰到刘杰老师，简单汇报了一下

下午在QQ上进行了汇报
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.20进行了一次电话通话：
重点：“代表性”
从测试出发，不同约束的代表性也不同，“约束代表了什么？”、“约束的解代表了什么？”
约束的解的性能受到不同约束求解方法的限制
将自己的看法轮廓嵌入到文章中
找几篇博士硕士论文看看，理解“测试”的意义

所有的测试用例生成都是为了找到具有代表性的用例，都是为了满足成本约束。
文中提到成本约束是多余的。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.23进行了一次电话通话：
1、测试目标。条件覆盖等逻辑覆盖准则只是最基本的要求，不能作为测试目标；
       要突出本文的特点；
       布尔表达式那一块都是为故障检测。
2、每个方法都只是针对某一方面，对于那些方法，不需要详细说明，指明特点或优势即可；
       不用在意技术细节，这是下一阶段需要关注的问题；
       引用文献时，可以借用他人对该方法的看法，根据自己的研究重点进行分析后在转述。
       有时候引用一篇文献只是列一个名词在那里；
       另外，要注意说“行（hang）话”，即书写时要注意用词，使用学术名词，不能太过通俗。
3、最难的是指出未来的研究发展方向。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.9.29进行了一次电话通话：
1、逻辑覆盖准则的包容层次结构图换成圈。
2、布尔表达式有什么特点（如结构等），它为什么能用于故障检测；
       从布尔表达式的角度，而不是从故障检测的角度出发；
       文章重点是布尔表达式和约束。
3、用例生成的方法点评要更深入；
       找一些用例生成的文章（可以不是约束方面的），看看它们的点评有什么特点，有没有什么规律；
       深入了解不同的方法特点才能明白未来的研究方向。

以上三点是重点。

4、相关工具和平台的收集
5、时序逻辑相关的用例生成；
       注意文献中有没有提及这方面，收集相关文献。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.10.9进行了一次电话通话：
1、前面的归类是对的：
																							  |――>根据具体情境设计算法生成测试用例
                           |――>通过约束生成测试用例――> |
       三类――> |                                                      			  |――>提取约束，使用约束求解器生成测试用例
                           |――>通过约束筛选测试用例
       所有工作往这三类上靠
2、故障也是一种情境
3、布尔表达式分为正确的布尔表达式和涵盖了故障布尔表达式
4、约束求解是一个NP-完全问题
       缩小解空间
5、“图”这一块先不管
6、后面考虑“测试用例来源”这个问题
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.10.24进行了一次电话通话：
1、约束的定义，需要详细界定（之前对约束的理解有误）
		约束是对系统性质的描述，根据描述生成测试用例，符合描述方式的测试用例自然可以检测系统性质
		系统性质包括功能性、安全性、故障性等
		约束――>形式归约（逻辑表达式）
		
2、对于约束，有些能以逻辑表达式描述，有些不能
		本文以逻辑表达式描述约束，逻辑表达式包括命题逻辑表达式、谓词逻辑表达式等
		以命题逻辑表达式描述系统性质，则逻辑表达式的求解是一个SAT问题
注：（1）若不考虑SAT问题，则系统可以直接用逻辑（命题逻辑、谓词逻辑等）表示。
		（2）“图”这一块不用管，因为“图”也可以转换为逻辑表达式，之所以用“图”表示，是因为这样更直观而已

3、本文的核心是“对SAT问题求解”
		直接对SAT问题进行求解太过困难，可以从某一方面着手，减小问题空间
		例如：基于故障的测试方法只考虑特定的故障类型，忽略其它，通过排除法确定系统不包含某些故障
						这种方法只是故障检测的其中一种方法
		由此生成的测试用例，需要判断其是否为最优解，这个时候则使用覆盖准则等来衡量其性能。

4、文中“通过约束生成测试用例，根据具体情境设计算法”
		此处的情境需要仔细考虑，故障情境没错，考虑的是系统的故障性，其它情境需要重新考虑

5、文章思路：
		第一章：不谈软件测试，直接谈测试用例的生成方法
							提出约束的概念，给出详细定义（一些相关的概念也要说明）
							点明“基于约束的测试用例生成”方法的优缺点
							写明本文的目的
		第二章：预备知识
		第三章：通过约束生成测试用例――>具体情境
		……

6、综上，目前版本的文章缺陷是约束理解有误，没有明确的核心，涉及范围过广过大
		当前任务是开始收拢，回顾之前看过的文献，重新确定其中提及的具体情境，
		并深入其中，理解清楚其方法的优缺点，并明白进一步的研究方向，这样才能找到下一篇论文的研究点
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.11.11进行了一次电话通话：
1、系统性质限制系统行为
		约束与具体系统形式息息相关，从系统具体形式出发，阐述约束
		在不同形式的系统中，约束形式虽然都是布尔表达式，但是约束意义即约束表现的系统性质不同，使用约束的技术也不同，不能脱离具体背景环境谈论约束
		
		系统形式包括底层代码、不同模型，以及形式归约等（也可分为软件工程说明书、程序等）
		必须在宏观上说明约束在不同形式系统中的作用，例如：之前的论文只是从原子层面阐明人体结构，还要上升到宏观层面，即原子组成的结构是什么，是手，是脚，还是其它组织，以及它们对人的具体作用
		
2、本文重点是约束，要把约束讲透
		先讲约束，再谈其它
		讲清楚约束以后，自然而然地过渡到测试用例生成
3、“预备知识”这一节的内容可以打散后融入到后文，取消这一节
		CSP即约束满足问题这个概念不需要明确提出，只需点明要满足约束即可
		变异分析是一种测试充分性准则，用于评估测试用例，不是求解思路
		筛选也是一种策略，考虑其作用，重构论文框架
4、（具体情景）基于约束的求解思路：
		基于故障的测试，重构，没必要像那篇综述一样写太细，为约束服务，有些重点描述，有些一笔带过
		组合测试（包括因素组合、取值组合），因素表示约束具体意义
		基于模型的测试
		
		以上三者都要阐明它们与约束的关系
		
		基于约束的求解技术：
		符号执行（求解器）
		基于搜索的测试（求解器）
		
5、测试用例自动生成――>基于约束的测试用例生成（其实不一定非要自动生成，半自动也可以）
		总的思路，即考虑四个方面：测试目标、约束形式、系统形式、技术手段
		其实每个情景就是这四个方面的某一方面方式变化，而后重新对这四个方面进行研究
		必须交代清楚这四者
6、后续任务：
		（1）理清思路
		（2）先写开题报告《基于时序逻辑的测试用例生成》，这其实就是在测试用例生成是考虑时间约束，思路不变，还是那四个方面
					开题报告主要是把问题讲清楚，然后指出要使用的技术
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.11.11进行了一次电话通话：
时序逻辑只是时间约束的表现形式，这不是重点，重点是时间约束
根据之前的框架，即测试目标、约束形式、系统形式、技术手段，理解时间约束
时间约束，即：不满足A，则满足B

论文看得已经差不多了，目前先仔细思考那个框架
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.11.21进行了一次电话通话：
根据以下五个步骤，每个步骤思考是什么、为什么、怎么做；
1、先讲清楚模型及性质，据此确定目标，能测什么测什么，从能测的东西中选一个目标，而不是从一开始就定目标。
2、确定模型之后，确定“约束”本身约束的是什么，约束了变量的那些行为。
		模型：描述系统行为和特征
		约束：限制变量的变化
		约束在模型中的位置及约束本身的意义，这两者确定了约束在模型之中的责任，以及测试目标，
		所谓位置，例如：程序中，输入中的变量，路径中的变量
3、确定测试目标
		约束作为分支条件――>路径覆盖
		                输入条件――>输入覆盖，分为合法、非法
4、自动化方法
		既要考虑模型的特征，又要考虑约束的特征，由此提出技术路线
5、测试用例的有效性验证
		故障检测能力评估、与其它方法进行对比等
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.12.11进行了一次谈话：
1、论文的思路框架：
		给“约束”和“测试用例”（这两个概念是论文核心）下定义，建立这两者之间的关系
		约束：功能、形式、模型（背景）
		测试用例：类型（黑盒、白盒）、好坏（故障覆盖能力等）

		约束有许多种，测试用例有许多种
		将它们看作一个个的集合，本文的目的就是建立代表“约束”的集合与代表“测试用例”的集合之间的映射关系，
		在进行这项工作时，需要思考：若“约束1”与“测试用例集A”已有映射关系，那“约束1”与其它测试用例集是否也能建立映射关系

		注：自己下定义时，必须客观、清楚（先不考虑全面性的问题），尽量使用数学符号，用科学语言描述

2、在给概念下定义时，若当前概念没有专家下过定义，就看它的上一层次或下一层次概念的定义，用别人的概念来解释自己的概念
		例：“命题逻辑”下一层次的概念是“原子命题”

3、布尔表达式是命题逻辑公式
		谓词逻辑中的谓词以及“存在”、“所有”这样的量词在程序中不存在，因此程序中没有谓词逻辑公式，只有命题逻辑公式
		
4、论点：“通过约束可以生成测试用例”
		论文列出论据时要说明该论点的研究现状与待解决的问题。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2017.12.20进行了一次电话通话：
1、深入理解什么是软件约束，及其形式、作用，约束的作用与其所处模型位置有关
2、深入理解什么是测试用例，及其测试目标等性质
以上两点分别做两个表格
写一篇说明文“什么是软件约束”
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
……（除了电话谈话，还有QQ交流没有列出
			此处列出的是比较重要的谈话，还有其它没那么重要的谈话没有列出）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.4.18进行了一次电话通话：
1、测试用例生成方法换个指标，修改一下，组合一下
		合约只是一个手段
		围绕基本问题：测试用例的基本问题是“只能取子集”，以此针对特定问题，指标可以区分不同子集
2、出论文最快的途径――改进已有方法：
（1）方法很好，用到其它地方；
（2）方法不够好，换个指标，提升它在其它指标上的性能；
3、当前任务：
		从之前看过的论文中，找一篇最熟悉的论文，看看可以改进的地方
		找出一个需要解决的问题
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.4.20进行了一次电话通话：
1、第一步不考虑该算法的优化
		第一篇论文直接运用该方法到组件交互测试中
		在组件合约背景下，这是一个……问题
2、第二篇论文考虑改进
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.4.23在8-201进行了一次汇报：
1、组件调用结构：顺序结构、分支结构、循环结构。
		这三种结构够不够？还有没有其它结构？如果有，能否归入这三种结构？
		这些调用结构是体现在哪里？流程图？控制流图？
2、获取调用结构
		覆盖率是针对组件调用序列树，《Enhancing Constraint based Test Generation by Local Search》这篇论文中的覆盖率是针对符号执行的执行树
		程序概念系统：约束、语句
		组件概念系统：合约、组件
		程序的三种基本结构在组件系统中是否存在，若不存在，则要下定义
3、做实验，体现有效性和优势
		调用关系覆盖，为什么要做这个，不做会怎么样？
		程序的分支覆盖是公认的，而这个调用关系覆盖要想一个背景出来，换一个名词
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.5.3在8-407进行了一次汇报：
研究过程：问题是什么？目标是什么？标准是什么？解决方法是什么？
1、问题背景
		集成测试：是什么？为什么？
		要讲清楚使用的模型和集成测试之间的关系
2、目标是什么
		实现自动化
		测试目标是“交互关系覆盖”（使用这个名词不够准确，交互是两个组件间的交互，而执行树是一堆组件的交互，阅读文献，换一个名词，找到更准确的描述）
3、标准（标准的依据是对性能的要求）
		例如：要做“加法”的测试，“3+4”是否可以作为测试用例，是否有效？怎么判断？需要标准
		若将标注设为“两个整数的加法”，则“3+4”可以
		也可以将这个“标准”理解为“研究范围”，但不够准确。测试用例只能取子集，需要代表性数据，判断代表性的“标准”是什么，取子集时划分“研究范围”的“标准”是什么？
		代表性数据和性能指标之间有关联关系。
4、解决方法
		基于约束的测试方法

补充：
（1）集成是将模块组装，使系统功能逐步完善
			每个组件只有部分功能，通过组件间的协作实现系统功能
（2）人工方法、自动化方法：
			先把人工方法讲清楚，在实现自动化的过程中，约束无法完美描述系统性质，此时需要进行补充定义，或部分修改人工方法，使其满足自动化要求
（3）当前任务：
			先把研究过程讲清楚，进行清晰准确的描述，然后才是写论文，论文是研究的成果，而研究是一个逐步求精的过程，可以在研究过程中添加各种定义，而不是上来就直接给定义，这样的定义很有可能在后面用不上
			（搞清楚要研究的问题后，找相关文献也容易得多；要跟着研究过程走，而不是跟着论文结构走，把问题、目标和标准的概念搞清楚了，后面工作就好做了）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.5.10进行了一次电话通话：
1、论文中要点明的要点：
（1）组件交互与执行树相关（即组件交互与执行树的关系）
			组件交互通过执行树实现
			执行序列
（2）集成测试与执行树相关（即集成测试与执行树的关系）
2、三个关键点：
（1）两个组件的交互扩散到一系列组件，形成系统功能。
（2）组件衔接是靠合约（布尔表达式）完成。
			执行路径是为了跑遍所有交互关系，还是为跑遍功能？
（3）
①测试覆盖准则代表了什么？例如白盒测试中的语句覆盖代表了对程序所有语句的遍历，分支覆盖代表了对程序所有逻辑分支的覆盖，而执行树中的覆盖率在组件交互测试中代表了什么？
②执行树中的执行路径代表了什么？
③执行路径与交互的关系？
3、“‘集成测试’怎么做？”这个部分中的三个原因需要换个说法，为自己的主题服务，按自己的需要写。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.5.22进行了一次电话通话：
1、写论文要注意说法，先谈需求
		例如，系统功能是由组件功能组合而成，每个组件提供一部分功能……
2、组件集成是通过组件调用形成，由接口实现组件交互
		组件集成测试（即交互测试）的两个测试要素：一是接口，二是上下文环境（即执行顺序）
		先谈这两个要素，再谈执行树的覆盖率

当前任务：
搞清楚组件集成测试（即交互测试）的两大要素――接口和上下文环境，给出明确定义和解释。
然后才能谈执行树的覆盖率在以上两大要素代表什么。
总而言之，就是找到组件交互测试中公认的测试充分性准则，然后建立起执行树覆盖率与这些公认的测试充分性准则之间的关系。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.5.26进行了一次电话通话：
1、对比、修正：原来的执行树（符号执行树）
								 新的执行树（组件执行树）
2、对比、修正，体现效果（要描述清楚）：新的执行树（组件执行树）
																					  Petri网
		注：Petri网和状态机一样，是一个成熟的建模方法。
3、改造原因：（1）用来的算法（符号执行，约束求解）
							（2）体现效果（组件交互测试）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.4进行了一次电话通话：
1、论文的contribution：一种新的的组件交互测试方法，对象是组件系统，阶段是集成测试
		“先进行”体现在哪里：覆盖率的提升……
													设计比较指标，把方法的“好”表现出来（这里有个小技巧，即刻意突出什么，忽略什么）
2、论文的Introduction部分将需求
					第二部分将方法（注意：一般性概念在Introduction中稍微解释一下就行了，需要明确解释的且后面要用到的才给出精确定义
																	不需要太过刻意地去定义所有概念）
		……
					最后比较实验：不能只与一个方法比较，太过单薄
													比较时需要注意“跟谁比”
																				   “比什么”（设置指标）
																				   “设计实验”（借鉴别人的实验）
3、工作的两个重点：（1）怎样把组件中的执行树描述清楚
										  （2）实验

当前任务：
1、开始写论文（6月底中期检查之前应完成大部分工作）
2、找对比的论文（除了2016年的那篇Petri网论文，还需要其它组件交互测试方面的论文）
		注意：找到的论文发给他，看看值不值得比较
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.5进行了一次电话通话：
1、“符号执行树”与“组件执行树”的概念放到一起写
		直接提出“组件执行树”的概念，给出定义
		（“组件执行树”是对“符号执行树”的扩充，与“符号执行树”比较是为了理清“组件执行树”的概念，论文中不需要介绍“符号执行树”
2、不用“调用结构”，用“组合结构”
		原子组合关系，两两组合形成组合结构
		从已有权威文献中找出“组合关系”的定义，把“组合关系”放到执行树中，形成组合结构，然后形成执行树
		（直接给出“组合结构”的定义太过突兀，使用“组合关系”作为过渡）
			例如；符号执行树有性质c，组件执行树没有性质c，但有性质a和b，可以映射出性质c，此时便需要解释性质a和b，这样它们在后面的测试用例生成过程中可以映射出c，从而使用原有方法生成测试用例。
3、与Petri网方法比较，是为了找到它的弱点，与其比较，体现自己方法的“好”
		小技巧：与其它方法的弱点进行比较，体现自己的优势，避开自己的缺陷。
4、benchmark
		先看别人的论文，看看他们这样体现自己方法的好坏
5、论文贡献（contribution）：（1）提出了构建“组件执行树”的方法；
														  （2）测试用例生成方法。

当前任务：
1、从权威文献中找到关于“组合关系”的定义，将其运用到组件执行树中，形成“组合结构”
		（把“组件执行树”解释清楚，包括定义“组件执行树”）
2、
（1）找对比的论文（除了2016年的那篇Petri网论文，还需要其它组件交互测试方面的论文）
			注意：找到的论文发给他，看看值不值得比较
（2）参考别人的论文，看看他们怎样体现自己方法的好坏。
			（寻找实验用的benchmark）
3、开始写论文（6月底中期检查之前应完成大部分工作）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.8在8-201进行了一次汇报：
1、写论文的核心：contribution

2、论文结构：
第一章：方法背景
				（为什么提出这个方法，背景是什么，有什么问题，提出的这个方法的优势是什么？）
				介绍背景，背景下的问题，为了解决这个问题，提出了一个方法，该方法的优势。（还需要声明该方法适用于哪类组件。）
				解释“组件测试”，点明需求，抛出问题。
				我的工作，创新点。
				组件定义放到第一章。
				UML协作图不需要介绍太详细，各个概念一句介绍，默认读者了解该方法的知识，精力集中在自己的创新点上。
				UML协作图和合约放到第一章中介绍。

第二章：相关工作
				点评一下其它相关方法，引出自己的方法。
				
第三章：方法过程要解释清楚
				解释核心概念――组件执行树。
				组件执行树用二元组表示CET=(V, E)。
				组件执行树是什么，能干什么。
				
第四章：约束求解算法

第五章：实验

第六章：结论

3、写论文是一个推理过程，每一章前面先抛出问题，再引出下文。
		不需要解释得太详细，论文主要是抛出概念，不需要介绍所有细节。
		
4、实验方法的两种选择：
		（1）比较其它方法，体现自己的优势；
		（2）不与其它方法比较，重点分析自己方法的性能。
					将“组件组合测试的指标c”与“本方法的路径覆盖率”对应起来，
					研究“路径覆盖率”在“组件组合测试的指标c”下的效果，
					例如，可能80%的路径覆盖率只能达到60%的c覆盖率
								 可能90%的逻辑覆盖率可以达到80%的c覆盖率
								 ……
					研究清楚这些情况，为使用者提供指南，可能某个使用者需要不低于80%的c 覆盖率，这时他需要达到多高的路径覆盖率。

5、6月底中期检查
	  7月13日“第三届全国形式化方法与应用会议”截止投稿。
	  因此，6月完成理论工作，完成大部分论文；7月写代码，做样例和实验。

当前任务：
1、开始写论文（6月底中期检查之前应完成大部分工作）
		先写“组件执行树”和“算法”那两章
		写完一章就汇报一次
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.11在8教1楼大厅偶遇：
1、contribution是“组件执行树”，因此“组件执行树”是核心，重点放在这里。
2、先定义“组件执行树”，讲清楚要得到的是什么，然后定义合约及UML协作图，并设计转换算法。
3、消息类型够用就行，不要求全，新的东西可以后面再加，先搭一个框架出来。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.15在8-411进行了一次汇报：
1、所有论文的核心是contribution
		从做的事中推出贡献
		思考组件执行树在哪一方面的效果更优（理论上分析，与Petri网相比，哪方面的性能更优）
		
		抛出问题：组件交互测试哪些问题？
		为了解决某个难题，提出了该方法，该方法有什么优势（例如哪方面的覆盖率更高），该方法的贡献有哪些？
2、核心概念
		组件执行树中的“组件”――|
															|――――协调这两个概念，保持一致
		协作图中的“组件”――――|
		
		基于组件的协作图――――|
															|――――已知条件，应用场景
		组件合约 ――――――――|
		
		根据应用背景，确定组件的定义，它应该包含哪些信息
		（“组件”到目前为止没有一个明确的定义，但有一般性的解释，文中对组件的定义不能超出它的一般性解释）
3、  组件执行――――|
		组件交互――――|――――三者的关系要融洽，要解释清楚
		事件发生序列――|
4、重要注意事项：
		通过理论分析，观察组件执行树方法能得到最好的哪一方面的测试用例，
																							即它在哪个测试指标上性能最优，这个指标可能是接口覆盖，
																																												可能是事件覆盖，
																																												可能是事件发生序列覆盖，
																																											也可能是其它指标，
																																								这些指标只能选一个，多个指标做不到。
		得到的这些测试用例是否属于组件交互测试？
		它们与组件交互有什么关系？
		根据得到的测试用例对论文题目进行修改。
5、总结
		综上所述，总共分为三点：（1）要突出contribution
															 （2）阐明应用背景
															 （3）各个概念要融洽
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.19在8-407进行了一次谈话：
1、各个概念要融洽，要一致（放到Introduction部分解释）
		协作图中的“组件”概念，组件执行树的“组件”概念等。
		
		关于“组件”和“类”，不需要刻意去区分它们。
		UML中的“组件”概念是其为了方便部署而进行的定义，UML协作图中的“对象”可以是组件。
		
2、合约来源要解释清楚

3、contribution要抓准
		组件执行树的路径覆盖反映到“功能覆盖”上，每条路径对应到功能上。
		不要去套接口覆盖、事件覆盖之类的，这样太慢，出不了成果。
		别人提出接口覆盖等测试准则是为自己的工作服务的。
		（不要完全套用别人的定义，因为别人给出的定义是为自己的工作服务的）
		
		要以自己的工作为中心，用公共的概念和语言体系解释自己的工作，可以对公共概念进行补充定义，为自己的工作服务。
		例如：别人做“1+1=2”，我做“1+3=4”，在相同的语言体系下做不同的工作。
		不要用自己的语言去解释别人的工作，因为别人给出概念定义等是为自己的工作的服务的。
		（之前看论文，写综述，都是为了了解公共的概念和语言体系）

4、集成测试中有许多问题，Petri网解决了什么问题，本方法解决了什么问题？（可以放到“相关工作”部分）
		要以自己的工作为中心。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.26进行了一次电话通话：
（以下内容为指导中期考核时怎么汇报，中期考核时间为8.27上午8:30在8-201，这是大数据组的）
1、组件开发的好处
												 |――来源
2、组件“合约”的解释――|――定义
												 |――内容
		这个解释要具体到它在实验中是怎么体现的
		例如：Eiffel能不能得到组件执行树？
					 OCL能不能得到组件执行树？如果不能，要进行语义上的扩展
					 JML能不能得到组件执行树？
		具体的，以JML为例，“合约”在其中是怎么体现的？

（以下内容为指导论文写作）
1、各个概念要突出（“组件”、“合约”等）
2、执行树之后要丢掉“交互”这个概念
		围绕“执行”这个概念，不要去套“交互”这个概念，要以自己的工作为中心
		组件“执行”与“组合”的关系
		“执行树”与组件“组合”的关系
		
		组件软件由一个个功能点组成，每个功能点由一个个组件功能组合而成，组件执行实现功能
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.6.27进行了一次电话通话：
1、想清楚自己做了什么事，然后解释它的意义
		组件与程序执行树的组合
		把符号执行引入到组件集成测试中
		最大的创新就是“组件执行树”，这是一种新的方法模型
		把“执行树”的概念立起来，这是一种新的方法，其中一些概念是之前没有的，需要自己定义、解释，不要总是去套别人的概念
		
2、组件的“组合”、“接口合约”是什么？

3、论文问题：
（1）缺实验
实验项目自己构造，可以借鉴程序执行树的实验
（2）缺测量指标
如果采用路径覆盖，反映到功能需求覆盖，
那么，功能需求是什么？<――可以借鉴程序执行树，必须落实到每一个概念上
			 程序中的路径表示什么？程序功能是什么？与执行树有什么关系？可以将这些内容借用、转化，放到组件组合中
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.1进行了一次电话通话：
1、单个组件――>组合，考虑各种情况――>执行
2、组件组合的好坏通过执行体现
		组合与整个系统的关系
		整个方法是基于执行的
		先不谈合约，只谈执行
3、组合测试的方法有哪些，这个方法的优势在哪里
4、合约是为了方便组合
		组件组合在一起执行，合约便于组合
5、Introduction是重点
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.2在8-407进行了一次谈话：
1、Introduction不前面好几段都是废话，都是一些基础的东西，要记住会看这篇文章的都是一些同行，他们都清楚这些东西
		将问题不能太泛，要细化、聚焦
		开门见山，直接讲要做集成测试，然后指出集成测试中的关注点有哪些，我关注的是什么，用了什么方法，反映了什么性质
		点明解决的是什么问题，用了什么方法
		
		组件执行，执行的是什么？（组件调用序列）反映了什么性质？（覆盖率之类的，要引用权威文献的说法）
		以程序执行为例，执行的是路径，反映了一些覆盖率方面的性质。
2、讲明为什么要用合约？合约的好处是什么？
		还要举例说明基于合约的组件开发已经被广泛应用，例如：Eiffel语言、采用JML规范的Java……

总之，在提出“组件执行树”方法之前要点明：
（1）“组件执行”是什么？
（2）“组件执行”与“测试”的关系是怎样的？
（3）“组件执行”能够反映什么性质？（组件组合后的性质）
（4）遇到什么困难？（组件源代码不可见）
然后，提出“组件执行树”方法克服困难，有各种好处（包括反映性质）
点明本文贡献：
（1）组件执行树模型；
（2）基于合约的组件执行树构造方法；
（3）测试用例生成方法。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.3在8教门前偶遇，进行了一次谈话：
1、写论文就像做买卖，要夸自己的产品好，比如卖西瓜，要夸西瓜好，而不是夸水果好，这没夸到重点。
		要从权威文献找出一些观点来支持自己的论文，比如引用某些权威说西瓜好的话。
2、可以根据实验项目先构造出组件执行树，然后反推出UML协作图。
		一切以自己的工作为中心。
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.7在8-407进行了一次谈话：
1、Introduction部分要介绍工作的全貌
		包括符号执行、组件执行、组件执行树、合约、UML协作图等
		介绍的过程是一个推理的过程
2、介绍自己的工作时，重要、关键概念才需要标明出处，一些次要概念只用一句话带过就行，例如“集成测试”要用一句话解释
		对某些概念的解释也只挑选部分对自己有用的信息，不要全部信息都堆上去。
3、题目要改，突出“组件执行树”
		所做的所有工作的中心是“组件执行树”，要时刻把它凸显出来
4、Introduction部分可以和相关工作合并到一起写
5、找“四大学报”的论文，看看他们是怎么写论文的Introduction部分的
		四大学报：计算机学报、软件学报、计算机研究与发展、电子学报
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.14在QQ上进行了一次汇报：
1、使用的符号系统还需要改善
2、完善实例
3、不要刻意强调DbC
4、不要纠结Eiffel
5、以下几个问题要解释清楚：
（1）执行树能带来什么好处？
（2）执行树能够反映程序执行的什么性质？
（3）一般能否组件执行树？
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.15在8-407进行了一次谈话：
1、语句要精练，也就是文中缺哪句话都不行
2、组件组合测试需要提供辅助信息
3、介绍增强可测试性的技术时，要介绍这些辅助信息的用处，对集成测试的用处
4、先指出已有方法的不足，为弥补不足，可使用执行树，执行树原本用于程序执行，但可以应用组件软件运行中
5、组装测试需要解决什么问题
6、使用的符号系统中去掉U型符号
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.18在8-407进行了一次谈话：
7.15在8-201向导师进行了一次汇报，主要指出了以下两个问题
（1）调用关系可能不是树；
（2）要以覆盖准则为导向，根据不同的覆盖准则，生成的执行树也不同。

针对以上两个问题
（1）上次汇报没解释清楚，组件执行树是根据UML协作图中的消息序列生成的，消息序列中的1、2、3等序号表明了消息的执行顺序
（2）要弄清楚执行树能够采用的覆盖准则
①组件执行树中路径代表什么？
②组件执行树中路径覆盖能测什么？有什么用？
③覆盖准则不用去套组件软件的覆盖准则，可以直接用执行树本身的准则
Petri网那篇论文也是直接用的Petri网本身的覆盖准则，但它清晰明确地阐述了这些覆盖准则能测什么

当前任务：
（1）深入了解执行树及其覆盖准则
（2）了解求解器的性能（百万级？处理上百万的变量）
（3）形式化描述的符号系统要改善，借鉴别人的执行树形式化表述
（4）语句要精炼
（5）案例完善
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.22进行了一次电话通话：
1、在具体的测试中，Petri网和执行树的差异
		例如，先不考虑组件，同一个软件系统，就可以用Petri网建模测试，也可以用执行树建模测试，人们为什么选用Petri网？
		与Petri网相比，执行树的优越性
		Petri网的优势、缺点 ――|
														|――对比两者的差异
		执行树的优势、缺点――|
		可能存在差异的方面：测试样本、测试方法……
2、案例的话，构造时暂时不考虑Petri网，先走通执行树方法
当前任务：看那两篇老师给的论文，总结Petri网和执行树的差异，23日上午汇报一次
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.23进行了一次QQ通话：
1、一般性的Petri网覆盖准则是什么？
2、路径覆盖域状态覆盖、变迁覆盖和可达性覆盖的不同
		路径覆盖能否满足状态覆盖、变迁覆盖和可达性覆盖？
		路径覆盖的优势是什么？
当前任务：第2个任务为主要任务，第1个任务可以暂缓
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.24在8-407进行了一次谈话：
1、Petri网和执行树的对比不是建立两种模型之间的对应关系，而是对比它们分别能测软件的什么质量
		最终的目的都是检测软件质量，A方法和B方法的区别在于检测的方面不同
2、坚持概念，而思路和方法可以不同
		要让各种文献资料为自己服务，在它们的基础上进行深入的思考
3、Petri网没有体现软件的整体性
当前任务：
搞清楚Petri网能测什么，反映到程序层面，它的覆盖率代表什么？
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.28在8-407进行了一次谈话：
1、先清楚组件，再讲其它
		缺一个对组件的定义
		合约放到组件中
2、对一项事物的定义，信息要全，后面提到该事物就是指定义中的该事物的信息
		不能给出定义后，又在其它地方补充对该事物的信息
		定义中的信息要全，要集中
3、Petri网只是对本身的结构进行覆盖，并没有对应到传统意义的覆盖度上
		组件执行树完成协作图的消息序列路径覆盖，从而完成功能测试
		一个协作图对应一项功能
4、定义3（组件模型）
		定义4（协作图）
5、每个概念要深入思考下一层的概念
		多想
		老师反复提的概念，想一想为什么老是提这些概念
6、前置条件描述程序接受什么样的输入
		后置条件判断什么样的输出是正确的
7、基于组件执行树模型的集成测试方法
当前任务：理清自己的工作，借鉴别人怎么说清楚自己的工作，而不是照抄语句
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.29在8-407进行了一次谈话：
1、第2节“组件执行树模型”部分
		“组件软件”这个说法有问题（用“基于组件的软件开发”），要从开发者的角度
		定义“组件”、“方法”、“接口”：组件是一些封装好的方法，通过接口访问组件内的方法，访问要遵循合约
		每个方法包含接口（即输入参数、输出参数）、前置条件、后置条件
		
2、第2.1节“组件执行树模型的定义”部分
		在CET定义之前要加一段文字描述，解释执行树是什么，然后从执行树的使用类比到组件执行树（程序执行树有什么性质，同理，组件组合同样可以），再解释组件执行。要讲清“组件执行树是什么？与组件执行有什么关系？”
		组件执行与符号执行的共性是“执行”，先解释程序执行，然后才有组件执行。
		
		CET定义中的TL，要解释其中的节点。
		
		节点N的定义中，要加一个节点名称。父节点的后置条件要满足子节点的前置条件（parent.postconditon<children.precondition）。
		
		要解释树的边：父节点调用子节点。
		
		要解释“一次执行反映一次功能”。
		
		一个功能就是一个协作图，就是一颗组件执行树。协作图――>执行树――>自动生成测试用例。
		在对协作图中的消息进行定义时，可以将之前对“方法”的定义嵌入其中，一切以自己的工作为中心，怎么方便怎么来。
		
3、第3节“测试用例的自动生成”部分
		这里要分成两个部分：路径约束的生成、路径约束的求解。其中，求解部分，要对当前的约束求解工作有一个简述。
		测试覆盖准则放到测试用例生成算法之后，分析算法能覆盖什么。
		
4、写论文就是要让别人能看懂，能够重现我的工作，然后认可我的工作。

5、本方法实际上是基于UML协作图的测试用例生成，只是把协作图转换成组件执行树，从而实现测试自动化。

补充：所有工程项目必须有return
			任何方法都要前置、后置条件（为本算法服务，该加就加，不要顾忌冗余）
			所有东西都是为组件执行树方法服务，该加就加
			要对该方法有一个整体概念
当前任务：根据上述要求，对论文内容进行修改
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.7.30在8-210进行了一次简短的谈话：
当前任务：组件执行树的模型构建算法有很大问题，赶紧把模型构建算法写好，研究意义由他解决
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.1进行了QQ通话：
当前任务：（1）完善算法：处理UML协作图，生成组件执行树
					  （2）完善实验（案例可以选择一个场景来做）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.3在8-407进行了一次汇报：
1、协作图→执行树（包含分支条件，这是一种约束）→组件执行树（包含合约，这是另一种约束）→路径约束（分支条件+合约）
2、“组件执行树”的一个主要创新点是自动化
3、这是一种新的方法
4、如果Petri网方法与本方法极度重合，一个解决办法找特定的应用场景，在该场景中Petri网方法效率低下，而本方法高效
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.7进行了一次电话通话：
1、还缺一个自动生成测试用例的算法（要把那几个步骤改成伪代码的形式）
2、先跑一个实例，再改测试用例生成算法，这样改起来快一些
		如果实例跑不通，说明这个算法有问题
3、协作图转换成执行树之后，在生成测试用例的过程中，能否使用某些关于执行树的工具，实现自动化
		否则，这个模型转换就没有意义，可以选择直接在协作图上生成测试用例，不用转换成执行树
		必须弄清楚转换成执行树之后能否使用现成的工具
		还是要先跑一个实例，实例出来后就容易弄清楚这个问题
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.8在QQ上进行了一次交流：
1、消息（message）的定义中要加上调用者和被调用者
		即消息中要注明发送者和接收者
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.10在8-407进行了一次汇报：
1、做研究就是要抠细节，一些关键的地方要解释清楚
2、介绍相关工作的意义有两点：
（1）说明这项工作有很多人在做，不是自己随便想出来的一个研究点
（2）指出相关工作的不足，吹自己的方法的优点：点评其它人的工作时要直击要害，指出它们相对于本方法的不足
3、接口只是对输入进行规约，而合约（前置条件和后置条件）是同时限制输入输出参数
		所以接口上无法定义合约
		合约应定义到方法上
4、用于检测实际输出的测试预示是最后一个消息的后置条件
		要保证实际输出满足测试预示，就必须保证方法序列中间的所有后置条件都满足
5、Petri网方法中，一次正常测试是指一个测试用例集
		与Petri网方法比较时，可以引用别人夸协作图方法的话
6、求测试输入时要前置条件和后置条件同时放进去，
		因为前一消息的输出可能是后一消息的输入，这样的话，后置条件也可能限制输入参数的取值

当前任务：
（1）首要任务：解释清楚“在协作图中，方法之间是怎样通过合约进行衔接的”，如果解释不通 ，是否要加其它UML图进去
								 主要是解释清楚第一个方法，它的调用者是谁？
								 合约是定义在组件上，还是定义在方法上
该任务可以参考其他人的工作，看看他们是怎么定义“组件合约”，以及怎样在协作图中用合约衔接方法
今天之内要给出答案
（2）完善论文中对相关工作的介绍和点评
（3）写好“结束语”
补充：在细节上完善实例
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.12进行了一次电话通话：
1、保持一个认识：节点就是消息
		消息对应着方法
		组件包含方法
2、读懂每一句话的意义，理解为什么这么说
		分为两个阶段：（1）理解“为什么这么写？”（2）思考“怎样可以写得更好？”
3、为了对论文进行更精确地描述，可以对一些内容进行修改
4、修改全文时要逐字逐句地读，保持概念的一致性

当前任务：
（1）完善“相关工作”部分，尤其是合约的“相关工作”部分要精简，说明他们的方法并指出不足
（2）完成“摘要”部分
（3）连通全文（注意保持概念的一致性）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.13在QQ上进行了一次交流：
1、执行树模型还需要添加“路径约束”定义

当前任务：
先写好整体，在添加“路径约束”的定义
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.14进行了一次电话通话：
1、把“场景路径”改为“功能执行路径”
		“场景路径”是别人定义的，“组件执行树”中使用“功能执行路径”
2、借用别人的工作时成果时，不能直接说“×××在文献×中有详细定义”或“可以使用文献×中介绍的方法”
		消息序号的定义中，引用的那篇文献要点明它是官方文档
		约束预处理阶段采用了那篇文献的约束优化技术，要换个说法
3、摘要部分还需要突出问题
		系统的组织机构（即整体性）和约束规范（即合约）
		系统功能特性与合约的紧密结合
补充：摘要的英文版
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.15提交了论文，将《基于组件执行树模型的集成测试方法》一文投到了第三届全国形式化方法与应用会议（FMAC 2018）上
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.16在QQ上进行了一次交流：
1、将提交论文时填写的信息从英文改成中文
		因为提交的是中文论文

后期的工作：（1）精读一下petri网那篇论文，搞清楚他的合约机制
						  （2）研究实验，提升实验数量和内容
						  （3）设计相应工具实验，看看怎么设计合理的实验提升，扎实我们的研究
我们要争取投到 Petri网哪个级别的期刊上去
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.17在微信上留言：
关于Petri网的合约测试中：
1、Petri网起到什么作用？
2、Petri网用的是建模行为，这个行为与合约是怎么关联起来的？

当前任务：搞清楚以上两个问题
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.20在QQ上进行了一次汇报：

当前任务：考虑怎么做更丰富的实验
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.8.28在8-407进行了一次汇报：
1、Petri网方法没有考虑分支条件，组件调用序列是直接给定的
2、组件执行树方法无法区分1次循环以上的两条路径，那就不考虑循环执行一次以上情况的比较，只考虑循环执行0、1次
3、提供什么样的数据说明方法可行
（1）数量（使用多个实例项目，可以是三个、四个、五个……）
（2）指标（覆盖率等）
（3）分析实验结果
（4）当前实验太弱，都是自己构造的，要使用第三方程序（即现成的带合约、协作图的实例）
4、实验做得好的话，把组件执行树方法改成英文，投外文期刊（例如Petri网方法的那个期刊）
5、要毕业的话，必须有论文见刊（这项工作落在基于约束的综述那篇论文上）
		大论文的内容中，实验部分必须充实（之前的实例肯定不行），还有工具部分必须实现
6、有什么阶段性的进展要主动汇报（例如找到了哪些第三方实例）

当前任务：
1、写一个“实验方案”出来
		寻找其它人使用的实例：
		（1）UML协作图的实例项目（如果上面没有合约，可以自己添加合约）
		（2）合约的实例项目
2、随着对组件执行树方法的理解加深，回过头来检查组件执行树建模过程是否有错，进行完善
		以“‘合约→Petri网’分析”一文的思路方式去重新检查“基于组件执行树模型的集成测试方法”一文，完善其建模过程
3、实验工具的开发
注：以上三项工作，1和2并行进行，3可以放后

补充任务：抽个时间把“基于约束的测试用例生成研究综述”在原来的基础上理一理（从合约的角度）
						之前做了很多对比，写了很多汇报，把这些以文字的形式添加到综述中
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.9.7在8-407进行了一次谈话：
1、目前赶紧写那篇综述
		9月15日左右（17号）把论文投出去，然后根据反馈意见进行修改
		9月份把这篇综述发出来，发一般期刊（不能抄袭，要有点新意，要有自己的看法）
		另一篇论文9.30出结果，两个可能――“录用”和“不录用”，但都要评审意见，10月份之后的任务就是根据评审意见完善那篇论文
2、写那篇综述时的两个问题：
		（1）文献要全
		（2）要做的工作：技术路线归类、应用归类、未来研究方向归类（根据之前提交给老师的材料总结出新的自己的归类方式）
		再就是在网上搜一下“怎么写综述”
		
补充：
（1）写综述的时候，必须注意，要以自己总结出的框架为核心，把参考文献揉碎了，用于支持框架中的某个观点（可以参照另一篇	论文的写法）；
（2）另外，要快，不要再以“先看后写”的方式写，而是直接给出框架，然后根据之前对参考论文的映像填充框架内容；
（3）回顾文献内容时只需要阅读abstract、introduction和conclusion三部分，了解其看法，用于支持自己框架的某个观点，除非是某项内容需要细抠，才需要细读论文内容；
（4）若文献B引用了文献A，在利用文献A时，可以借鉴文献B对文献A的介绍；
（5）若某些技术点没有支撑，可以添加新的文献。
			
当前任务：
完成那篇综述（9月17号之前，只有10天时间），期间有什么想法要主动与老师交流
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.9.10在微信上进行了一次谈话：
2018.9.11下午3点在8-201向导师汇报工作，要提前5分钟到场，一定要做好ppt
要点：
1、先介绍组件执行树那篇论文的工作
		（1）介绍现有工作
				有哪些问题，别人是怎么解决的？（Petri网方法是给定路径，测试其可达性；组件执行树方法是达到路径覆盖）
																				  （还有18年的那篇协作图论文方法是怎样的）
				还有哪些问题没解决，我们是怎么解决的？（一定要讲清楚解决了什么问题）
				这篇论文的优缺点一定要解释清楚
		（2）下一阶段工作
				下一阶段工作主要讲改进的目标，解决的问题是什么？
				①添加更多的实验，完善实例，例如使用变异测试技术分析该方法的故障检测能力
				②现有的工作还有哪些问题可以解决：例如，合约与其它模型结合构造组件执行树模型
					例如，使用UML状态图构造组件执行树模型，为什么使用状态图，使用状态图有什么好处？
2、再介绍综述的工作
		组件执行树那篇论文已经投出去了，9月30号才出结果
		现在就是根据已经做的工作，提出一些新的想法，然后等评审结果出来以后，结合评审意见对论文进行修改
		现在就是根据之前看的那些论文，总结一下它们的工作，写一篇综述，投一个普通期刊
		（1）写综述的目的在于对研究现状进行总结，发现其中的问题和不足，并展望未来的研究
					重点在于找出已有工作的问题和不足，从而提出未来的研究方向
		（2）简单介绍一下综述的工作（框架）（导师可能要看具体论文，最好准备一下）
					核心在于“用约束解决测试中的问题”：约束用在哪些方面？是否解决了问题
					①基于约束语法的测试方法，目的在于检测故障，那它们能检测哪些故障？
					②基于约束语义的测试方法：约束的应用语义，即约束在具体使用环境的含义
																			约束必定是依附在某个具体的模型上的，例如协作图中的（路径）约束表示消息序列
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.9.11在8-210进行了一次谈话：
1、综述中对未来的展望部分，要从已有工作解决的问题出发，看看还有哪些问题是值得研究的
		评价方法时可以从不同指标入手，例如，某方法在分支覆盖上表现良好，还可以看看它在路径覆盖上表示如何
		一定要从测试的角度看约束的作用
2、抓紧完成那篇综述，一定要在9月份收尾
3、认真研究2018年的《符号执行研究综述》一文，论文评审结果出来以后，修改论文时很有可能会用到其中的技术
		因为都是执行树，组件执行树只是执行树在组件、合约中的应用
4、综述中将测试方法分为“基于约束语法的测试”和“基于约束语义的测试”是可以的

当前任务：
完成综述
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.9.17在8-201进行了一次汇报：
1、给出“基于约束语法的测试”的定义
		“基于约束语法的测试”根据“语法”分类
2、“但这方面的工作还需要进一步扩展”――这种说法不行
		要说明为什么进行扩展？
		不扩展会怎样？扩展的工作有什么好处？
		在哪些方面扩展？
		在哪些方面的哪些问题解决了，会带来什么好处？
3、第3、4章可以分别做个小结，总结已有的工作
		最后的展望部分则介绍值得研究的方向
4、“基于约束语义的测试”不要分为黑盒、白盒
		而是根据“语义”、“约束获取”、“约束求解”分类
5、值得研究的方向可以另外做个小笔记（小组内部用）
		列出：进一步的研究可以做什么
					 加哪些技术，加了可能有什么效果
					 参考文献有哪些

补充：1、时间比较紧，写综述时重点关注近5年的文章的摘要、结论
					若文献A比较老，较新的文献B中点评了A，可以借用B对A的点评，而不必取阅读A
			 2、展望未来的工作时，可以提取近5年文章的“相关工作”、“结论”部分的展望，综合一下，形成自己的展望
			 3、30号之前完成！30号之前完成！30号之前完成！
					（还剩 2 周，30号之前必须投出去）
			 4、10月修改好之前投出去的论文
					11、12月制作工具
					再就是写大论文

当前任务：
综述往后写，完成“基于约束语义的测试”部分（下周汇报，基本固定在每周一开讨论班）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.9.24在8-201进行了一次汇报：
1、从“测试用例生成”的角度将SAT、SMT求解技术
		以“测试用例生成”为核心
		介绍的时候分两种情况：（1）现有技术已被使用
														（2）读过的技术文献没人使用，将其中的新观点添加到综述中去
																	例如，现将没人用过的技术文献，介绍其优缺点，然后介绍SAT、SMT
2、看了那些文献以后，记录一些自己觉得值得研究的点（例如：变异测试）
		灵光一现时，把idea记录下来（下次10.8汇报）

当前任务：
（1）重新组织基于约束语义的测试的语言，将之前看的文献内容糅合进去
（2）完成整篇综述的润色

补充：
（1）需要去了解布尔表达式测试的测试策略的大致原理，可能会问到
（2）“约束获取”部分的“软件模型中的约束获取”还需要仔细考虑，讲清楚其中的“路径”与“约束”的含义与作用
		（以Petri网那篇论文为例）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.10.8在8-201进行了一次汇报：
关于《基于约束的测试用例生成研究综述》：
1、将“约束求解技术”那一章时注意：
		（1）有哪些方法？
		（2）什么时候用SAT？什么时候用SMT？
		（3）有哪些好用的工具？使用这些工具有哪些限制？哪个工具是哪个公司的？哪些工具收费、免费？
		总之，介绍SAT和SMT是要从“使用者”的角度告诉大家怎么选用方法或工具
2、所谓综述，将特点、作比较
		让没接触过该领域的读者也能明细该领域的脉络，了解相关工作做到了什么程度
		用图、表等形式比较各方法
3、这篇综述大方向是“基于模型的测试”，约束模型（以布尔表达式形式）
		“在软件模型或程序代码中大量存在用谓词、命题或者布尔表达式描述的句子。。。”要解释谓词、命题或布尔表达式在模型中的含义
		“基于约束语义的测试属于路径测试。。。”太武断，模型上的约束限制了模型的路径，要介绍具体模型
4、“软件模型中的约束获取”部分是属于基于模型的测试，要介绍有哪些模型，进行归类、总结、比较、分析
5、“基于约束语义的测试”部分的表述方式要与“基于约束语法的测试”部分一致
		把程序归为模型，对模型进行分析
6、先将专业名词，再做解释
		展望部分单独一章（展望部分不要引用参考文献）
		总结部分单独一章

关于《基于组件执行树模型的集成测试方法》：
1、之所以说解决的问题比较老，是因为引用的近3年的文献太少，引用的都是比较老的文献
2、同步、异步要从协作图本身解释（看2015年的那篇论文）
3、采用的是命题逻辑
4、路径爆炸的缓解程度取决于求解器的能力（其求解能力达到多少量级）
5、总结和摘要要突出贡献：本方法不是效率提升，而是一个新方法，做的是别人没做过的工作
6、写作计划：首先，改文字部分，改完就投，收一轮评审意见回来，能中更好
							 然后，改实例，继续投
							 
当前任务：先改综述，有见刊的论文才能参加答辩
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.10.12进行了一次电话通话：
1、根据评审意见1和2修改《基于组件执行树模型的集成测试方法》（实验部分暂时改不了；先不管评审意见3）
		改好后翻译成英文版，将英文论文投到《计算机应用与软件》
		论文提交截止时间： 2018年10月25日
2、时间节点很重要！时间节点很重要！时间节点很重要！
		不要拖！不要拖！不要拖！
		
补充：
评审意见1：
主要问题如下：
（1）组建执行树算法 可以给出合适的详细的描述；
（2） ATM 机协作图 未用矢量图，放大后失真；
（3） 解决的问题是一个比较老的话题，方法上创新性不大，但是构建了一个 组建执行树模型 是一个不错的 idea;
（4） 引用的参考文献 近三年的过少。

评审意见2：
本文虽然提出了算法并举例说明，但没有工具实现以及与其他测试用例生成方法的效率比较，很难说提高了测试效率和降低了测试成本。
本文存在的具体问题：
（1） 标点符号问题：检查全文，正确使用中文标点；
（2） 2.2中没有明确定义“功能执行路径”，文中出现多种说法：“方法序列”、“消息序列”、“节点序列”
（3）3.1：map函数的第三和第四个参数多余，可以由第一个参数获取；组件执行树生成算法缺乏解释，建议举例说明“一个消息可能对应多个节点”的情况。
（4） p7：测试用例生成算法不严谨，算法输出应该是测试用例集
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.10.15在8-201进行了一次汇报：
1、解释“组件执行树生成算法”时，解释程序块，即解释该块是干什么的，并解释分支转折等关键点，不用深入解释块内具体步骤
		读者要了解块内具体步骤可以参考伪代码
		解释程序给机器看时，要详细介绍每一个步骤；解释程序给人看时，只需要解释程序块
2、2004和2007年的三篇中文参考文献去掉，换成最新的2013年的那篇参考文献
3、文中记得说明一下从协作图中自动生成测试用例方面的工作较少
4、用Visio重新画一下ATM机协作图
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.10.22在8-201进行了一次汇报：
1、做研究的三个层次：
（1）第一个层次：论文对学科领域有贡献
（2）第二个层次：论文做的研究有亮点（相比同领域的其它研究）
（3）第三个层次：用最佳的方式把亮点展现出来
2、10月份之内必须做完所有工作（包括两篇论文的工作）
		那篇综述就算是熬夜通宵也要完成
3、11月1日开始，必须着手制作工具
		制作工具期间重新去精读Petri网那篇论文
		同时完善组件执行树论文的实验
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.10.29在8-201进行了一次汇报：
1、论文剽窃：
（1）思想剽窃，例如，乙剽窃甲（甲：A→B，乙：A→B）
								修正后，甲：A→B，乙：A→B+C
（2）文字剽窃，修正方法：修饰文字，重新组织
2、重新组织文字，例如：
		原文：因此，在生成测试用例集时，根据故障类型之间的包含关系，可以忽略一些故障类型，而重点关注另一些故障类型，从而在检测尽可能多的故障类型的同时，生成尽可能小的测试用例集。
		修改：因此，为了生成尽可能小的测试用例，并检测尽可能多的故障类型，可以利用故障类型之间的包含关系，忽略一些故障类型，而重点关注另一些故障类型。

当前任务：
针对那篇综述，梳理全文脉络，修饰文字，重新组织复制粘贴的文字
任务步骤：
（1）先修改完善“4.1.1 设计模型”、“4.1.2 实现模型”和“4.2.2 约束求解技术”等部分；
（2）再纵观全文，梳理脉络，修饰文字，重新组织复制粘贴的文字
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.5在8-201进行了一次汇报：
1、关于《基于约束的测试用例生成研究综述》
（1）摘要中的每句话都要检查有没有必要写
			“约束以布尔表达式的形式广泛存在于软件规格说明和程序实现中，对软件的正确性有着举足轻重的影响。”这句话要改
			别人论文里的话是为自己的主题服务的，它在这样的情景下是需要的，但在我的论文里不一定是必需的，还可能是废话
			改为“使用布尔表达式形式的约束广泛存在于……”，因为约束除了布尔表达式，还有其它表示形式
（2）摘要要从“模型”的角度出发――基于模型的测试
			约束作为软件系统的模型，是生成测试用例的依据
									  |――①故障模型：成分的添加或缺失
			约束模型――|
									  |――②约束模型本身的“真”“假”值决定了路径的走向，与其它模型结合，表示不同的含义
（3）扯“基于模型的测试”的大旗，以此为框架，解释自己的思想和工作
			摘要部分只讲自己做了什么，还要解释其意义，并学会扯虎皮拉大旗
			根据以上思路修改摘要、引言等部分
2、关于《基于组件执行树模型的集成测试方法》
（1）写专利实验，理清实验思路（实验是与其它方法对比）
（2）论文改成 6 页，实验留着，其余算法等部分删减，解释清楚思想就行，可以用图，尤其相关工作部分要删减
			最多 8 页
3、12月份开发工具
			
当前任务：
（1）完善综述
（2）完善“组件执行树”论文
（3）专利（和实验）
前两项任务优先

注意事项：论文和专利中的名词错开，论文中谈“合约模型”，专利中谈“组件执行树模型”
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.6在8-407进行了一次谈话：
1、3rd International Conference on Information Technology and Industrial Automation (ICITIA2018) 录用了《Integration Testing Method Based on the Execution Tree Model of Components》， 虽然它说“所有录用并注册的论文将提交至EI和ISTP检索”，但前面两届会议都没被EI检索，所以这是一个比较水的会议，不管它，把论文投其它会议
2、另外两个会议：2019 2nd International Conference on Software and Services Engineering(ICSSE 2019)――投稿截止日期：2018.11.10
									  2019 8th International Conference on Software and Information Engineering(ICSIE 2019)――投稿截止日期：2018.11.20
		决定好投哪个会议后，再和老师商量一下
3、先完善《基于约束的测试用例生成研究综述》，投科技核心期刊《计算机与现代化》

当前任务：
先搞那篇综述，会议往后靠
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.15在8-606进行了一次谈话：
1、投“2018年计算机信息科学与人工智能国际学术会议（CISAI2018）”的那篇英文论文的题目换一个一般的题目，换成“基于UML协作图和合约的集成测试用例自动生成方法”
2、这篇英文论文的摘要一定要突出“自动生成”
3、“组件执行树”是一个比较好的卖点，放到后面的论文
4、后续工作：写专利报告→制作工具的同时完善实验
5、实验部分，“ATM机”和“图书馆系统”一样，都是烂大街的实例，选实例一定要选好的实例，可以是核方面的或其它的
		认真研读Petri网那篇论文，找到它的实例来源，看看它是怎样提升实验的复杂度的
6、求解器方面，性能待定，需要酌情展开相关理论研究

当前任务：
（1）本周内完成英文论文，投出去
（2）英文论文完成后，写专利报告
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.19在8-201进行了一次例会：刘老师讲解科学论文的概念、分类和研读
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.22在8-606进行了一次谈话：
1、写综述的时候尽量不要引用别人的综述
2、直接去 EI 的官网找论文，最新的论文一般是会议论文，但 SCI 不收会议论文
3、以经典论文为引子，找引证文献，近两年的
4、标引用时，除非引用的是该论文特有的观点，否则像一些常识知识，不需要标引用
5、尽量不要引用中文文献
6、“组件执行树”论文的后续工作：写报告→制作工具→完善实验（借鉴Petri网那篇论文，看看它是怎样提升实验的复杂度的）
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.11.26在8-407进行了一次谈话：
1、压缩文字，一些基础性概念不用解释
		看看该期刊的综述的字数一般是多少
2、删除文献后，不要加“修改为。。。”
		直接写删除就行了
3、删除文献的理由不能是没引用，要说根据专家意见来说“不太相关”
4、年份最好是开始和最近。其它的都不要列出年份，或者能找到近年的工作
		语法 部分最新的是2015太老了
5、其它意见参见“C:\Users\Lenovo\Desktop\Constraint\其它\论文投稿\指导意见”中的文件
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.12.3在8-201进行了一次例会：
1、模型是对事物的抽象，从某个方面描述事物的特征信息
2、接口测试与功能测试是两码事
		例如：鼠标的“接口（头）”与鼠标本身的“功能”是两码事
								  ――――――							    ――
								  数据传输									点击、移动
								  高、低电平的转换
3、PPT每一页信息要够
		图片要配合文字描述（图片不要占页面太大空间，若与文字无关，则是无用信息）
		关键词要突出（加粗、放大）
4、研究要从概念出发
		要明晰各个概念的定义
		然后要明确问题
		
当前任务：
（1）写专利报告
（2）认真思考使用案例的设计
			Petri网那篇论文中也没有与其本身类似的工作，看看它是怎么提升实验复杂度的
（3）找打师兄师姐的大论文模板，把内容贴进去看看有多少页了
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.12.7进行了一次电话通话：
该论文题目，不要用“综述”二字，改成“……的研究”，把“语法研究”和“语义研究”概括进去，不要用“简述”或“概述”，因为这和“综述”的区别不大
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.12.10在8-201进行了一次例会：
自我总结：
1、专利申请报告的细节还要进一步完善，主要是“具体实施方式”部分：
（1）外部文件的格式
			UML协作图：Rational Rose是mdl文件，UML官方指定xmi文件，另外还有xml文件
			合约：具体格式还需要进一步完善
（2）路径约束导入到约束求解器时，需要遵循一定的语法格式，因此需要了解相关语法格式
2、专利申请报告要求用实例验证该方法，如果设计新实例的话，会比较麻烦

其它：打电话问一下《计算机与现代化》编辑部，2月份的时候，论文能否发表见刊
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
2018.12.17在8-201进行了一次例会：
1、关于IEEE Access的审稿，可以从以下几个方面提意见：
（1）语言表达
（2）某处的理论是否充足
（3）哪个地方看不懂，某些概念建议补充说明
（4）可以从对于领域贡献的角度对论文进行评判，需要哪些改进
2、专利申请报告中的实例，要能介绍清楚方法，可以用原来的方法，但要细致
3、在论文中看到一些信息时，若要引用，应该去查询这些信息的最新进度，从而对信息进行更新

当前任务：
（1）抽个时间介绍一下该论文的结构等值得学习的地方
（2）介绍专利申请报告的工作（优先级最高）
（3）考虑设计实验指标
			Petri网论文设计各种指标背后是有各种考虑的
			要深入方法细节中考虑实验指标的设计
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



QQ汇报记录（只记录了周期较长、较重要的汇报记录）：
2017.7.3
2017.7.13
2017.7.21
2017.7.30
2017.8.8
2017.8.15
2017.8.24
2017.9.11
2017.9.18
2017.9.27
2017.10.8
2017.10.16
2017.10.23
2017.11.1
2017.11.10
2017.11.16（11月份主要任务是完成开题报告）
2017.12.9
2017.12.20
2017.12.21
2017.12.23
2017.12.26
2017.12.28
2017.12.30
2018.1.7
2018.1.16
……
2018.4.18
2018.4.20
2018.4.23
2018.5.2
2018.5.10
2018.5.18
2018.6.5
……
2018.7.7
2018.7.14
2018.7.23
2018.7.24
2018.7.28
2018.7.29
2018.8.10
2018.8.15
2018.8.20
2018.8.25
……
2018.10.25
……
2018.11.10